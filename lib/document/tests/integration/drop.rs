// crate::test_suite!(drop, [$$($$e:ident($n:literal)),+]);
// impl_test_suite!($(doc.drop(trax_document::EntityRef::$e($n)).unwrap();)+);
// Generated by ^^ (used "inline macro" from Rust Analyzer)
macro_rules! drop {
  ($name:ident, $i:literal,[$($e:ident($n:literal)),+]) => {
    paste::paste!{
      #[test]fn[<drop _$name _$i>](){
        let mut doc = trax_document::Document::new(include_str!(concat!("../testfiles/",stringify!($name),".trax"))).unwrap();
        $(doc.drop(trax_document::EntityRef::$e($n)).unwrap();
        )+assert_eq!(&doc.into_string(),include_str!(concat!("../testfiles/",stringify!(drop),"/",stringify!($name),".",stringify!($i),".trax")),);
      }
    }
  };
}

drop!(todo, 1, [Element(6)]);
drop!(todo, 2, [Element(13)]);
drop!(todo, 3, [Text(3)]);
drop!(todo, 4, [Element(8)]);
